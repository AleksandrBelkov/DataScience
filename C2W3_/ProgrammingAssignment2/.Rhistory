x=rbind(c(1,-1/4), c(-1/4,1))
x
x=rbind(c(1,-1/8), c(-1/4,1))
x
x=rbind(c(1,-1/4), c(-1/4,1))
x$get()
x
y<-solve(x)
y
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix function makes a list of functions:
## set the value of the matrix
## get the value of the matrix
## set the value of inverse of the matrix
## get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <-function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve function returns the inverse of the matrix.
## If the inverse has alredy been computed than
## it gets result and skips the computation
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
m = makeCacheMatrix(x)
m$get()
inv
cacheSolve(m)
cacheSolve(m)
x1 = rbind(c(1,-1/8),c(-1/8,1))
casheSolve(m1)
casheSolve(x1)
cacheSolve(m1)
cacheSolve(x1)
m1 = makeCacheMatrix(x1)
cacheSolve(m1)
cacheSolve(m1)
x1
t<-x[1]
t
t<-m[1]
t
m
x
t<-x[,1]
t
x1 = rbind(c(1,-1/4),c(-1/8,1))
x
t<-x1[,1]
t
x1
t
t<-length(x1[,1])
t
f<-x1[1,]
f
f<-length(x1[1,])
f
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix function makes a list of functions:
## set the value of the matrix
## get the value of the matrix
## set the value of inverse of the matrix
## get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <-function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve function returns the inverse of the matrix.
## If the inverse has alredy been computed than
## it gets result and skips the computation
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
num_rows <- length(x[1,])
num_columns <- length(x[,1])
if(num_rows != num_columns) {
message("The matrix is not square")
return (na)
}
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1,-1/16),c(-1/8,1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
num_rows <- length(x[1,])
num_rows <- length(x[1,..])
length(x)
ncol(x)
nrow(x)
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix function makes a list of functions:
## set the value of the matrix
## get the value of the matrix
## set the value of inverse of the matrix
## get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <-function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve function returns the inverse of the matrix.
## If the inverse has alredy been computed than
## it gets result and skips the computation
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
if(ncol(x) != nrow(x)) {
message("The matrix is not square")
return (na)
}
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1,-1/16),c(-1/8,1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix function makes a list of functions:
## set the value of the matrix
## get the value of the matrix
## set the value of inverse of the matrix
## get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <-function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve function returns the inverse of the matrix.
## If the inverse has alredy been computed than
## it gets result and skips the computation
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
if(ncol(x$get) != nrow(x$get)) {
message("The matrix is not square")
return (na)
}
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1,-1/16),c(-1/8,1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix function makes a list of functions:
## set the value of the matrix
## get the value of the matrix
## set the value of inverse of the matrix
## get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <-function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve function returns the inverse of the matrix.
## If the inverse has alredy been computed than
## it gets result and skips the computation
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
if(ncol(x$get()) != nrow(x$get())) {
message("The matrix is not square")
return (na)
}
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
m$get()
cacheSolve(m)
x = rbind(c(1,-1/16,1),c(-1/8,1,1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix function makes a list of functions:
## set the value of the matrix
## get the value of the matrix
## set the value of inverse of the matrix
## get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <-function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve function returns the inverse of the matrix.
## If the inverse has alredy been computed than
## it gets result and skips the computation
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
if(ncol(x$get()) != nrow(x$get())) {
message("The matrix is not square")
return (NULL)
}
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
cacheSolve(m)
x
x = rbind(c(1,-1/16),c(-1/8,1))
x
inv<-solve(x)
inv<-solve(x,...)
